// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230530163807_foreignKeysTest")]
    partial class foreignKeysTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Models.Survey", b =>
                {
                    b.Property<int>("surveyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("surveyID"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("numberOfQuestions")
                        .HasColumnType("int");

                    b.Property<string>("priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("surveyID");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyAssignee", b =>
                {
                    b.Property<int>("surveyID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("surveyID", "userID");

                    b.HasIndex("userID");

                    b.ToTable("SurveyAssignees");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyOption", b =>
                {
                    b.Property<int>("answerID")
                        .HasColumnType("int");

                    b.Property<int>("surveyID")
                        .HasColumnType("int");

                    b.Property<int>("questionID")
                        .HasColumnType("int");

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("answerID", "surveyID", "questionID");

                    b.HasIndex("surveyID", "questionID");

                    b.ToTable("SurveyOptions");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyQuestion", b =>
                {
                    b.Property<int>("surveyID")
                        .HasColumnType("int");

                    b.Property<int>("questionID")
                        .HasColumnType("int");

                    b.Property<int>("numberOfAnswers")
                        .HasColumnType("int");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("surveyID", "questionID");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyUserAnswer", b =>
                {
                    b.Property<int>("surveyID")
                        .HasColumnType("int");

                    b.Property<int>("questionID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<int>("answerID")
                        .HasColumnType("int");

                    b.HasKey("surveyID", "questionID", "userID");

                    b.HasIndex("userID");

                    b.HasIndex("surveyID", "questionID", "answerID");

                    b.ToTable("SurveyUserAnswers");
                });

            modelBuilder.Entity("WebAPI.Models.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"));

                    b.Property<bool>("admin")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("userID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyAssignee", b =>
                {
                    b.HasOne("WebAPI.Models.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("surveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyOption", b =>
                {
                    b.HasOne("WebAPI.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("surveyID", "questionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyQuestion", b =>
                {
                    b.HasOne("WebAPI.Models.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("surveyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("WebAPI.Models.SurveyUserAnswer", b =>
                {
                    b.HasOne("WebAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("surveyID", "questionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.SurveyOption", "SurveyOption")
                        .WithMany()
                        .HasForeignKey("surveyID", "questionID", "answerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyOption");

                    b.Navigation("SurveyQuestion");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
